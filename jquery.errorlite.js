// Generated by CoffeeScript 1.4.0
/*
errorLite v2.0 by Bruno Bernardino | 2013.03.23 | https://github.com/BrunoBernardino/ErrorLite
*/
(function() {
  var globals, helpers, methods;

  helpers = {
    generateID: function() {
      var S4;
      S4 = function() {
        return (((1 + window.Math.random()) * 0x10000) | 0).toString(16).substring(1);
      };
      return (S4() + S4() + "-" + S4() + "-4" + S4().substr(0, 3) + "-" + S4() + "-" + S4() + S4() + S4()).toLowerCase();
    }
  };

  globals = {
    options: {}
  };

  methods = {
    init: function(options) {
      var defaults;
      defaults = {
        dataType: "type",
        dataErrorTitle: "errorTitle",
        dataErrorHelp: "errorHelp",
        errorRequiredTitle: "Required",
        errorRequiredHelp: "This field is required.",
        errorMaxLengthTitle: "Too Big",
        errorMaxLengthHelp: "This field's value is too big. The maximum number of characters for it is {maxLength}.",
        autoCheck: true,
        errorClass: "errorLite-error",
        position: "inside",
        animation: {
          type: "fade",
          speed: "fast",
          easing: "swing",
          onComplete: $.noop,
          extra: {
            margin: 3
          }
        }
      };
      options = $.extend(defaults, options);
      globals.options = $.extend({}, options);
      return this.each(function() {
        var $this, data;
        $this = $(this);
        data = $this.data("errorLite");
        if (!data) {
          $this.data("errorLite", {
            target: $this
          });
          if (options.autoCheck) {
            methods.validate.call(this, options);
          }
          $(this).on("blur.errorLite", function() {
            return methods.validate.call(this, options);
          });
          return $(this).on("focus.errorLite", function() {
            return methods.hideError.call(this, options);
          });
        }
      });
    },
    destroy: function() {
      $(window).off(".errorLite");
      return this.each(function() {
        var $this, data;
        $this = $(this);
        data = $this.data("errorLite");
        return $this.removeData("errorLite");
      });
    },
    validate: function(options) {
      var $this, fieldValue, isRequired, maxLength, validationRegularExpression, validationType;
      if (typeof options === "undefined") {
        options = globals.options;
      }
      $this = $(this);
      validationType = "";
      isRequired = false;
      maxLength = 0;
      fieldValue = $(this).val();
      validationRegularExpression = null;
      switch ($this.attr("type")) {
        case "email":
        case "url":
        case "number":
          validationType = $this.attr("type");
          break;
        case "tel":
          validationType = "alphanumeric-extended";
          break;
        default:
          switch ($this.data(options.dataType)) {
            case "alphanumeric":
            case "alphanumeric-extended":
            case "email":
            case "url":
            case "number":
            case "slug":
              validationType = $this.data(options.dataType);
          }
      }
      if ($this.prop("required")) {
        isRequired = true;
      }
      if ($this.attr("maxlength")) {
        maxLength = window.parseInt($this.attr("maxlength"), 10);
      }
      if (validationType === "" && !isRequired && maxLength <= 0) {
        return true;
      }
      switch (validationType) {
        case "alphanumeric":
          validationRegularExpression = /[^a-z0-9]/g;
          if (validationRegularExpression.test(fieldValue)) {
            methods.showError.call(this, {
              title: "Invalid",
              help: "This field's value isn't alphanumeric. It must consist only of numbers and/or (non-special) letters."
            }, options);
            return false;
          }
          break;
        case "alphanumeric-extended":
          validationRegularExpression = /[^\u0000-\u00FFa-z0-9\-\._ ]/g;
          if (validationRegularExpression.test(fieldValue)) {
            methods.showError.call(this, {
              title: "Invalid",
              help: "This field's value isn't alphanumeric. It must consist only of numbers, letters, dots, underscores, dashes and spaces."
            }, options);
            return false;
          }
          break;
        case "email":
          validationRegularExpression = /^\S+@\S+\.\S+$/g;
          if (fieldValue.length > 0 && !validationRegularExpression.test(fieldValue)) {
            methods.showError.call(this, {
              title: "Invalid",
              help: "This field's value isn't an email. It must be a valid email address."
            }, options);
            return false;
          }
          break;
        case "url":
          validationRegularExpression = /^(http|ftp|https):\/\/\S+\.\S+$/g;
          if (fieldValue.length > 0 && !validationRegularExpression.test(fieldValue)) {
            methods.showError.call(this, {
              title: "Invalid",
              help: "This field's value isn't an URL. It must be a valid URL and start with http://, for example."
            }, options);
            return false;
          }
          break;
        case "number":
          validationRegularExpression = /[^\d]/g;
          if (validationRegularExpression.test(fieldValue)) {
            methods.showError.call(this, {
              title: "Invalid",
              help: "This field's value isn't a number. It must be a valid natural number."
            }, options);
            return false;
          }
          break;
        case "slug":
          validationRegularExpression = /[^a-z0-9\-_]/g;
          if (validationRegularExpression.test(fieldValue)) {
            methods.showError.call(this, {
              title: "Invalid",
              help: "This field's value isn't a valid slug. It must consist only of numbers, lowercase (non-special) letters, underscores and dashes."
            }, options);
            return false;
          }
      }
      if (isRequired && fieldValue.length === 0) {
        methods.showError.call(this, {
          title: options.errorRequiredTitle,
          help: options.errorRequiredHelp
        }, options);
        return false;
      }
      if (maxLength > 0 && fieldValue.length > maxLength) {
        methods.showError.call(this, {
          title: options.errorMaxLengthTitle,
          help: options.errorMaxLengthHelp.replace("{maxLength}", maxLength)
        }, options);
        return false;
      }
      return true;
    },
    showError: function(errorData, options) {
      var $this, errorHTML, errorID, generatedID;
      if (typeof options === "undefined") {
        options = globals.options;
      }
      $this = $(this);
      if ($this.siblings("." + options.errorClass).length) {
        return true;
      }
      if ($this.data(options.dataErrorTitle) && errorData.title !== options.errorRequiredTitle && errorData.title !== options.errorMaxLengthTitle) {
        errorData.title = $this.data(options.dataErrorTitle);
      }
      if ($this.data(options.dataErrorHelp) && errorData.help !== options.errorRequiredHelp && errorData.help !== options.errorMaxLengthHelp) {
        errorData.help = $this.data(options.dataErrorHelp);
      }
      generatedID = helpers.generateID.call(this);
      errorID = "errorLite-error-" + generatedID;
      errorHTML = "<div id=\"" + errorID + "\" class=\"" + options.errorClass + "\" title=\"" + errorData.help + "\">" + errorData.title + "</div>";
      $this.after(errorHTML);
      switch (options.position) {
        case "outside":
          $("#" + errorID).css({
            "margin-left": $this.outerWidth() + options.animation.extra.margin
          });
          break;
        default:
          $("#" + errorID).css({
            "margin-left": $this.outerWidth() - $("#" + errorID).outerWidth() - options.animation.extra.margin
          });
      }
      switch (options.animation.type) {
        case "slide":
          $("#" + errorID).slideDown(options.animation.speed, options.animation.easing, options.animation.onComplete);
          break;
        default:
          $("#" + errorID).fadeIn(options.animation.speed, options.animation.easing, options.animation.onComplete);
      }
      return $("#" + errorID).on("click.errorLite", function(event) {
        event.preventDefault();
        return methods.hideError.call($this, options);
      });
    },
    hideError: function(options) {
      if (typeof options === "undefined") {
        options = globals.options;
      }
      switch (options.animation.type) {
        case "slide":
          return $(this).siblings("." + options.errorClass).slideUp(options.animation.speed, options.animation.easing, function() {
            return $(this).remove();
          });
        default:
          return $(this).siblings("." + options.errorClass).fadeOut(options.animation.speed, options.animation.easing, function() {
            return $(this).remove();
          });
      }
    },
    hideAllErrors: function(options) {
      if (typeof options === "undefined") {
        options = globals.options;
      }
      switch (options.animation.type) {
        case "slide":
          return $("." + options.errorClass).slideUp(options.animation.speed, options.animation.easing, function() {
            return $(this).remove();
          });
        default:
          return $("." + options.errorClass).fadeOut(options.animation.speed, options.animation.easing, function() {
            return $(this).remove();
          });
      }
    }
  };

  $.fn.errorLite = function(method) {
    if (methods[method]) {
      return methods[method].apply(this, Array.prototype.slice.call(arguments, 1));
    } else if (typeof method === "object" || !method) {
      return methods.init.apply(this, arguments);
    } else {
      return $.error("Method " + method + " does not exist on jQuery.errorLite");
    }
  };

}).call(this);
